import React, { useState, useEffect } from 'react';
import './App.css';
import { BookOpen, ClipboardCheck, Beaker, FileQuestion, Menu, X } from 'lucide-react';

// Debug Panel Component to help troubleshoot
function DebugPanel({ activeSection, menuOpen }) {
  return (
    <div style={{ 
      position: 'fixed', 
      bottom: '10px', 
      right: '10px', 
      background: '#f0f0f0', 
      padding: '10px', 
      border: '1px solid #ccc',
      zIndex: 9999,
      fontSize: '12px'
    }}>
      <h4 style={{ margin: '0 0 5px 0' }}>Debug Info:</h4>
      <p style={{ margin: '0 0 5px 0' }}>Active Section: {activeSection}</p>
      <p style={{ margin: '0' }}>Menu Open: {menuOpen.toString()}</p>
    </div>
  );
}

// Main component
export default function App() {
  const [activeSection, setActiveSection] = useState('home');
  const [menuOpen, setMenuOpen] = useState(false);
  
  // For debugging - log state changes
  useEffect(() => {
    console.log("Active section changed to:", activeSection);
  }, [activeSection]);

  // Toggle mobile menu
  const toggleMenu = () => {
    console.log("Toggling menu, current state:", menuOpen);
    setMenuOpen(!menuOpen);
  };

  // Handler for section changes
  const navigateToSection = (section) => {
    console.log("Navigating to section:", section);
    setActiveSection(section);
    setMenuOpen(false);
  };

  // Render appropriate content based on active section
  const renderContent = () => {
    console.log("Rendering content for section:", activeSection);
    
    switch (activeSection) {
      case 'manual':
        return <ManualSection />;
      case 'simulations':
        return <SimulationsSection />;
      case 'quizzes':
        return <QuizzesSection />;
      case 'virtualLab':
        return <VirtualLabSection />;
      default:
        return <HomeSection navigateToSection={navigateToSection} />;
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-blue-600 text-white shadow-md">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold">Radiation Safety Training</h1>
          
          {/* Mobile menu button */}
          <button className="md:hidden" onClick={toggleMenu}>
            {menuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
          
          {/* Desktop navigation */}
          <nav className="hidden md:flex space-x-6">
            <NavButton 
              icon={<BookOpen size={18} />} 
              label="Safety Manual" 
              onClick={() => navigateToSection('manual')} 
              active={activeSection === 'manual'}
            />
            <NavButton 
              icon={<Beaker size={18} />} 
              label="Simulations" 
              onClick={() => navigateToSection('simulations')} 
              active={activeSection === 'simulations'}
            />
            <NavButton 
              icon={<FileQuestion size={18} />} 
              label="Quizzes" 
              onClick={() => navigateToSection('quizzes')} 
              active={activeSection === 'quizzes'}
            />
            <NavButton 
              icon={<ClipboardCheck size={18} />} 
              label="Virtual Lab" 
              onClick={() => navigateToSection('virtualLab')} 
              active={activeSection === 'virtualLab'}
            />
          </nav>
        </div>
        
        {/* Mobile navigation */}
        {menuOpen && (
          <div className="md:hidden bg-blue-700 px-4 py-2">
            <nav className="flex flex-col space-y-2">
              <MobileNavButton 
                icon={<BookOpen size={18} />} 
                label="Safety Manual" 
                onClick={() => navigateToSection('manual')} 
              />
              <MobileNavButton 
                icon={<Beaker size={18} />} 
                label="Simulations" 
                onClick={() => navigateToSection('simulations')} 
              />
              <MobileNavButton 
                icon={<FileQuestion size={18} />} 
                label="Quizzes" 
                onClick={() => navigateToSection('quizzes')} 
              />
              <MobileNavButton 
                icon={<ClipboardCheck size={18} />} 
                label="Virtual Lab" 
                onClick={() => navigateToSection('virtualLab')} 
              />
            </nav>
          </div>
        )}
      </header>

      {/* Main content */}
      <main className="flex-grow container mx-auto px-4 py-8">
        {renderContent()}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-white py-4">
        <div className="container mx-auto px-4 text-center">
          <p>Â© 2025 Radiation Safety Training Program. All rights reserved.</p>
        </div>
      </footer>
      
      {/* Debug Panel */}
      <DebugPanel activeSection={activeSection} menuOpen={menuOpen} />
    </div>
  );
}

// Navigation button for desktop
function NavButton({ icon, label, onClick, active }) {
  return (
    <button 
      onClick={(e) => {
        console.log("Nav button clicked:", label);
        onClick(e);
      }} 
      className={`flex items-center px-3 py-2 rounded transition ${
        active ? 'bg-blue-700' : 'hover:bg-blue-700'
      }`}
    >
      <span className="mr-2">{icon}</span>
      <span>{label}</span>
    </button>
  );
}

// Navigation button for mobile
function MobileNavButton({ icon, label, onClick }) {
  return (
    <button 
      onClick={(e) => {
        console.log("Mobile nav button clicked:", label);
        onClick(e);
      }} 
      className="flex items-center w-full px-3 py-2 rounded hover:bg-blue-800 transition"
    >
      <span className="mr-2">{icon}</span>
      <span>{label}</span>
    </button>
  );
}

// Home section component
function HomeSection({ navigateToSection }) {
  const features = [
    {
      title: "Safety Manual",
      description: "Access comprehensive radiation safety documentation.",
      icon: <BookOpen size={40} />,
      action: () => navigateToSection('manual'),
      color: "bg-blue-100 text-blue-600"
    },
    {
      title: "Interactive Simulations",
      description: "Practice procedures in a safe, virtual environment.",
      icon: <Beaker size={40} />,
      action: () => navigateToSection('simulations'),
      color: "bg-green-100 text-green-600"
    },
    {
      title: "Knowledge Assessment",
      description: "Test your understanding with quizzes and assessments.",
      icon: <FileQuestion size={40} />,
      action: () => navigateToSection('quizzes'),
      color: "bg-purple-100 text-purple-600"
    },
    {
      title: "Virtual Laboratory",
      description: "Apply your skills in simulated laboratory exercises.",
      icon: <ClipboardCheck size={40} />,
      action: () => navigateToSection('virtualLab'),
      color: "bg-orange-100 text-orange-600"
    }
  ];

  return (
    <div>
      <div className="max-w-3xl mx-auto text-center mb-12">
        <h2 className="text-3xl font-bold mb-4">Welcome to Radiation Safety Training</h2>
        <p className="text-gray-600 text-lg">
          Master essential radiation safety skills for laboratory work through 
          interactive learning, simulations, and assessments.
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-6 max-w-4xl mx-auto">
        {features.map((feature, index) => (
          <div 
            key={index}
            className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition cursor-pointer"
            onClick={() => {
              console.log("Feature clicked:", feature.title);
              feature.action();
            }}
          >
            <div className="p-6">
              <div className={`w-16 h-16 rounded-full ${feature.color} flex items-center justify-center mb-4`}>
                {feature.icon}
              </div>
              <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
              <p className="text-gray-600">{feature.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Manual section component
function ManualSection() {
  const [activeChapter, setActiveChapter] = useState(1);
  
  // Sample chapter data
  const chapters = [
    { id: 1, title: "Introduction to Radiation Safety" },
    { id: 2, title: "Radiological Fundamentals" },
    { id: 3, title: "Biological Effects" },
    { id: 4, title: "Radiation Limits" },
    { id: 5, title: "ALARA Program" },
    { id: 6, title: "Personal Monitoring Programs" },
    { id: 7, title: "Contamination Control" },
    { id: 8, title: "Radiological Emergencies" },
    { id: 9, title: "Storage and Disposal" },
    { id: 10, title: "Safe Handling Procedures" },
  ];
  
  // Chapter content (simplified for this demo)
  const getChapterContent = (id) => {
    switch(id) {
      case 1:
        return (
          <div>
            <h3 className="text-xl font-semibold mb-4">Introduction to Radiation Safety</h3>
            <p className="mb-4">
              If you have just accepted a position working with radiation sources, you have things to do to
              prepare. What is the next step? First you will need to know what will you be working with and
              how do you protect yourself as well as others. Typically, this requires training as a Radiation
              Worker. That will be you. Second, where do you receive the training, how long is it and what are
              your responsibilities?
            </p>
            <p className="mb-4">
              A common program where a general laboratory worker who is handling radiation sources can be
              found with many university programs. They are also found in research laboratories and medical
              institutions. There are too many to list here and would be a waste of your time to read them.
              Let's just assume you are at a university working in the laboratory handling radioactive
              materials. Working with x-ray systems or Class III or IV lasers may be administered the same
              way.
            </p>
            <p className="mb-4">
              The researcher (generally a faculty member and most likely your supervisor) has an
              authorization in his/her name. That means he/she has a permit. This is much like a license,
              although the actual license is held by the Radiation Safety Officer in the name of the institution.
              The researcher you are working for is most likely one of several or many others with an
              authorization under that license.
            </p>
          </div>
        );
      case 2:
        return (
          <div>
            <h3 className="text-xl font-semibold mb-4">Radiological Fundamentals</h3>
            <p className="mb-4">This chapter covers the basic concepts of radiation physics and identifies the three basic particles of an atom: protons, neutrons, and electrons.</p>
            <h4 className="text-lg font-medium mb-2">Atomic Structure</h4>
            <p className="mb-4">The basic unit of matter is the atom. It is made up of neutrons, protons, and electrons. The central portion of the atom is the nucleus, which consists of protons (with a positive electrostatic charge) and neutrons (no charge). Electrons orbit the nucleus (with a negative charge).</p>
            <h4 className="text-lg font-medium mb-2">Ionization</h4>
            <p className="mb-4">Ionization is the process of removing electrons from atoms. If enough energy is supplied to remove electrons from the atom, the remaining atom has a positive (+) charge. The positively charged atom and the negatively charged electron are called an ion pair.</p>
          </div>
        );
      case 3:
        return (
          <div>
            <h3 className="text-xl font-semibold mb-4">Biological Effects</h3>
            <p className="mb-4">This chapter examines how radiation affects living tissues and cells, and explores both short-term and long-term health effects of radiation exposure.</p>
            <p className="mb-4">Whether the source of radiation is natural or man-made, whether it is a small dose of radiation or a large dose, there will be some biological effects. Small doses will produce biological effects; however, these effects may not be observable and possibly even provide a life lengthening effect. Humans have evolved in a radiation environment.</p>
          </div>
        );
      default:
        return <p>Select a chapter to view its content.</p>;
    }
  };
  
  return (
    <div className="flex flex-col md:flex-row">
      {/* Sidebar for chapter navigation */}
      <div className="md:w-1/4 bg-gray-100 p-4 rounded-lg mb-6 md:mb-0 md:mr-6">
        <h3 className="text-lg font-semibold mb-4">Chapters</h3>
        <ul className="space-y-2">
          {chapters.map(chapter => (
            <li key={chapter.id}>
              <button
                onClick={() => {
                  console.log("Chapter clicked:", chapter.title);
                  setActiveChapter(chapter.id);
                }}
                className={`w-full text-left px-3 py-2 rounded transition ${
                  activeChapter === chapter.id
                    ? 'bg-blue-500 text-white'
                    : 'hover:bg-gray-200'
                }`}
              >
                {chapter.title}
              </button>
            </li>
          ))}
        </ul>
      </div>
      
      {/* Main content area */}
      <div className="md:w-3/4 bg-white p-6 rounded-lg shadow">
        {getChapterContent(activeChapter)}
      </div>
    </div>
  );
}

// Simulations section component
function SimulationsSection() {
  const [activeSimulation, setActiveSimulation] = useState(null);
  
  const simulations = [
    {
      id: 1, 
      title: "Radiation Survey Meter Operation",
      description: "Learn how to properly operate and read a Geiger-Mueller detector.",
      difficulty: "Beginner"
    },
    {
      id: 2, 
      title: "Personal Protective Equipment",
      description: "Practice the correct sequence for donning and removing PPE in a radiation area.",
      difficulty: "Beginner"
    },
    {
      id: 3, 
      title: "Spill Response Procedure",
      description: "Simulate responding to a radioactive material spill using the SWIMS methodology.",
      difficulty: "Intermediate"
    },
    {
      id: 4, 
      title: "Decontamination Procedure",
      description: "Learn proper decontamination techniques for different surfaces.",
      difficulty: "Intermediate"
    },
    {
      id: 5, 
      title: "Radiation Area Entry and Exit",
      description: "Practice the correct procedures for entering and exiting radiation controlled areas.",
      difficulty: "Advanced"
    },
    {
      id: 6, 
      title: "Sealed Source Handling",
      description: "Learn safe handling techniques for sealed radioactive sources.",
      difficulty: "Advanced"
    }
  ];
  
  // Simplified simulation content for this demo
  const renderSimulation = (id) => {
    if (id === 1) {
      return <SurveyMeterSimulation setActiveSimulation={setActiveSimulation} />;
    }
    
    return (
      <div className="text-center py-12">
        <h3 className="text-xl font-semibold mb-4">Simulation Coming Soon</h3>
        <p className="text-gray-600">This simulation is currently under development.</p>
        <button 
          onClick={() => {
            console.log("Returning to simulation list");
            setActiveSimulation(null);
          }}
          className="mt-6 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
        >
          Return to Simulation List
        </button>
      </div>
    );
  };
  
  // If a simulation is active, show it
  if (activeSimulation) {
    return renderSimulation(activeSimulation);
  }
  
  // Otherwise show the list of available simulations
  return (
    <div>
      <div className="max-w-3xl mx-auto text-center mb-8">
        <h2 className="text-3xl font-bold mb-4">Interactive Simulations</h2>
        <p className="text-gray-600">
          Practice radiation safety procedures in a virtual environment. 
          Select a simulation to begin your training.
        </p>
      </div>
      
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {simulations.map(sim => (
          <div 
            key={sim.id}
            className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition cursor-pointer"
            onClick={() => {
              console.log("Simulation clicked:", sim.title);
              setActiveSimulation(sim.id);
            }}
          >
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <h3 className="text-xl font-semibold">{sim.title}</h3>
                <span 
                  className={`text-xs px-2 py-1 rounded ${
                    sim.difficulty === "Beginner" 
                      ? "bg-green-100 text-green-700" 
                      : sim.difficulty === "Intermediate" 
                        ? "bg-yellow-100 text-yellow-700" 
                        : "bg-red-100 text-red-700"
                  }`}
                >
                  {sim.difficulty}
                </span>
              </div>
              <p className="text-gray-600 mb-4">{sim.description}</p>
              <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition w-full">
                Start Simulation
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Simple survey meter simulation component
function SurveyMeterSimulation({ setActiveSimulation }) {
  const [step, setStep] = useState(1);
  const [batteryChecked, setBatteryChecked] = useState(false);
  const [audioOn, setAudioOn] = useState(false);
  const [sourceChecked, setSourceChecked] = useState(false);
  const [backgroundChecked, setBackgroundChecked] = useState(false);
  const [completed, setCompleted] = useState(false);
  
  const totalSteps = 5;
  
  const handleNext = () => {
    console.log("Next button clicked, current step:", step);
    if (step < totalSteps) {
      setStep(step + 1);
    } else {
      setCompleted(true);
    }
  };
  
  const handlePrevious = () => {
    console.log("Previous button clicked, current step:", step);
    if (step > 1) {
      setStep(step - 1);
    }
  };
  
  const resetSimulation = () => {
    console.log("Resetting simulation");
    setStep(1);
    setBatteryChecked(false);
    setAudioOn(false);
    setSourceChecked(false);
    setBackgroundChecked(false);
    setCompleted(false);
  };
  
  // If the simulation is completed, show the results
  if (completed) {
    const allChecksCompleted = batteryChecked && audioOn && sourceChecked && backgroundChecked;
    
    return (
      <div className="max-w-3xl mx-auto bg-white p-8 rounded-lg shadow-md">
        <h3 className="text-2xl font-bold mb-6 text-center">Simulation Results</h3>
        
        <div className={`p-6 mb-6 rounded-lg ${allChecksCompleted ? 'bg-green-100' : 'bg-yellow-100'}`}>
          <h4 className="text-xl font-semibold mb-4">
            {allChecksCompleted 
              ? 'Congratulations! You completed all pre-operational checks.' 
              : 'Some pre-operational checks were missed.'}
          </h4>
          
          <ul className="space-y-3">
            <li className="flex items-center">
              <span className={`inline-block w-6 h-6 rounded-full mr-3 flex items-center justify-center ${batteryChecked ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>
                {batteryChecked ? 'â' : 'â'}
              </span>
              Battery Check
            </li>
            <li className="flex items-center">
              <span className={`inline-block w-6 h-6 rounded-full mr-3 flex items-center justify-center ${audioOn ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>
                {audioOn ? 'â' : 'â'}
              </span>
              Audio Turned On
            </li>
            <li className="flex items-center">
              <span className={`inline-block w-6 h-6 rounded-full mr-3 flex items-center justify-center ${sourceChecked ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>
                {sourceChecked ? 'â' : 'â'}
              </span>
              Source Check
            </li>
            <li className="flex items-center">
              <span className={`inline-block w-6 h-6 rounded-full mr-3 flex items-center justify-center ${backgroundChecked ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>
                {backgroundChecked ? 'â' : 'â'}
              </span>
              Background Check
            </li>
          </ul>
        </div>
        
        <div className="flex justify-center space-x-4">
          <button 
            onClick={resetSimulation}
            className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
          >
            Try Again
          </button>
          <button 
            onClick={() => {
              console.log("Exiting simulation");
              setActiveSimulation(null);
            }}
            className="px-6 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
          >
            Exit Simulation
          </button>
        </div>
      </div>
    );
  }
  
  // Content for each step of the simulation
  const stepContent = () => {
    switch(step) {
      case 1:
        return (
          <div>
            <h4 className="text-xl font-semibold mb-4">Prepare for Survey Meter Operation</h4>
            <p className="mb-4">
              Before using a radiation survey meter, you must perform several pre-operational checks to ensure the instrument is functioning properly.
            </p>
            <p className="mb-4">
              In this simulation, you will practice the proper sequence for checking and operating a Geiger-Mueller detector before use in a radiation area.
            </p>
            <div className="bg-blue-100 p-4 rounded">
              <p className="font-medium text-blue-800">
                Pre-operational checks should always be performed in the following sequence:
              </p>
              <ol className="list-decimal ml-6 mt-2 text-blue-800">
                <li>Check the calibration sticker and battery</li>
                <li>Turn on the audio</li>
                <li>Perform a source check</li>
                <li>Check the background radiation level</li>
              </ol>
            </div>
          </div>
        );
      case 2:
        return (
          <div>
            <h4 className="text-xl font-semibold mb-4">Check Calibration and Battery</h4>
            <p className="mb-4">
              First, inspect the calibration sticker to ensure the instrument's calibration is valid. Most calibration cycles are one year.
            </p>
            <p className="mb-4">
              Next, check the battery indicator to ensure there is sufficient power for operation.
            </p>
            <div className="bg-yellow-100 p-4 rounded mb-6">
              <p className="font-medium text-yellow-800">
                Note: If the batteries have expired, replace them. An occasional check during the day's activities will identify if the instrument is still operational.
              </p>
            </div>
            <div className="mb-4">
              <button 
                onClick={() => {
                  console.log("Battery check button clicked");
                  setBatteryChecked(true);
                }}
                className={`px-4 py-2 rounded transition ${
                  batteryChecked ? 'bg-green-600 text-white' : 'bg-gray-200 hover:bg-gray-300'
                }`}
              >
                {batteryChecked ? 'â Battery Checked' : 'Check Battery'}
              </button>
            </div>
          </div>
        );
      case 3:
        return (
          <div>
            <h4 className="text-xl font-semibold mb-4">Turn On the Audio</h4>
            <p className="mb-4">
              The audio on the instrument has a faster response time than the dial reading. By using the audio as an indicator for possible contamination, the operator is left free to visually concentrate on the location of the probe rather than on the meter.
            </p>
            <p className="mb-4">
              This should help prevent placing the probe in the contamination and reducing the effectiveness of the instrument.
            </p>
            <div className="mb-4">
              <button 
                onClick={() => {
                  console.log("Audio button clicked");
                  setAudioOn(true);
                }}
                className={`px-4 py-2 rounded transition ${
                  audioOn ? 'bg-green-600 text-white' : 'bg-gray-200 hover:bg-gray-300'
                }`}
              >
                {audioOn ? 'â Audio Turned On' : 'Turn On Audio'}
              </button>
            </div>
          </div>
        );
      case 4:
        return (
          <div>
            <h4 className="text-xl font-semibold mb-4">Perform a Source Check</h4>
            <p className="mb-4">
              A source check verifies that the instrument responds correctly to radiation. Use a known check source to confirm the instrument is detecting radiation properly.
            </p>
            <p className="mb-4">
              The source check should have a known response on the instrument. It is not recommended to use short-lived radionuclides as a source check. The response on the instrument should not vary over time.
            </p>
            <div className="mb-4">
              <button 
                onClick={() => {
                  console.log("Source check button clicked");
                  setSourceChecked(true);
                }}
                className={`px-4 py-2 rounded transition ${
                  sourceChecked ? 'bg-green-600 text-white' : 'bg-gray-200 hover:bg-gray-300'
                }`}
              >
                {sourceChecked ? 'â Source Check Completed' : 'Perform Source Check'}
              </button>
            </div>
          </div>
        );
      case 5:
        return (
          <div>
            <h4 className="text-xl font-semibold mb-4">Check Background Radiation Level</h4>
            <p className="mb-4">
              Know the background radiation levels. This should be done twice when using the instrument, both at the beginning and end of your work. In general, most laboratories try to identify low levels of contamination. For most operations, this is about two times the background.
            </p>
            <p className="mb-4">
              An increase in the background would suggest contamination is spreading.
            </p>
            <div className="mb-4">
              <button 
                onClick={() => {
                  console.log("Background check button clicked");
                  setBackgroundChecked(true);
                }}
                className={`px-4 py-2 rounded transition ${
                  backgroundChecked ? 'bg-green-600 text-white' : 'bg-gray-200 hover:bg-gray-300'
                }`}
              >
                {backgroundChecked ? 'â Background Check Completed' : 'Check Background Level'}
              </button>
            </div>
          </div>
        );
      default:
        return <p>Step content not found.</p>;
    }
  };
  
  return (
    <div className="max-w-3xl mx-auto">
      <h3 className="text-2xl font-bold mb-6">Radiation Survey Meter Operation</h3>
      
      {/* Progress indicator */}
      <div className="mb-8">
        <div className="flex justify-between mb-2">
          {Array.from({ length: totalSteps }).map((_, i) => (
            <div
              key={i}
              className={`w-8 h-8 rounded-full flex items-center justify-center ${
                i + 1 === step
                  ? 'bg-blue-600 text-white'
                  : i + 1 < step
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-200'
              }`}
            >
              {i + 1 < step ? 'â' : i + 1}
            </div>
          ))}
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className="bg-blue-600 h-2 rounded-full"
            style={{ width: `${(step / totalSteps) * 100}%` }}
          ></div>
        </div>
      </div>
      {/* Simulation content */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-6">
        {stepContent()}
      </div>
      
      {/* Navigation buttons */}
      <div className="flex justify-between">
        <button
          onClick={handlePrevious}
          className={`px-4 py-2 rounded ${
            step === 1
              ? 'bg-gray-200 cursor-not-allowed'
              : 'bg-gray-600 text-white hover:bg-gray-700'
          }`}
          disabled={step === 1}
        >
          Previous
        </button>
        <button
          onClick={handleNext}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          {step === totalSteps ? 'Complete' : 'Next'}
        </button>
      </div>
    </div>
  );
}

// Quizzes section component
function QuizzesSection() {
  const [activeQuiz, setActiveQuiz] = useState(null);
  
  // Simplified quiz for Radiological Fundamentals
  function RadiologicalFundamentalsQuiz({ onComplete }) {
    const [currentQuestion, setCurrentQuestion] = useState(0);
    const [selectedAnswers, setSelectedAnswers] = useState({});
    const [showResults, setShowResults] = useState(false);
    
    // Sample quiz questions
    const questions = [
      {
        question: "What are the three basic particles of an atom?",
        options: [
          "Protons, electrons, and positrons",
          "Protons, neutrons, and electrons",
          "Neutrons, electrons, and photons",
          "Quarks, leptons, and bosons"
        ],
        correctAnswer: 1
      },
      {
        question: "What is ionization?",
        options: [
          "The process of adding electrons to atoms",
          "The process of removing electrons from atoms",
          "The process of adding neutrons to a nucleus",
          "The process of nuclear fission"
        ],
        correctAnswer: 1
      },
      {
        question: "Which of the following is NOT a type of ionizing radiation?",
        options: [
          "Alpha particles",
          "Beta particles",
          "Gamma rays",
          "Radio waves"
        ],
        correctAnswer: 3
      },
      {
        question: "Which type of radiation has the highest penetrating power?",
        options: [
          "Alpha particles",
          "Beta particles",
          "Gamma rays",
          "X-rays"
        ],
        correctAnswer: 2
      },
      {
        question: "What is the SI unit for absorbed dose?",
        options: [
          "Rem",
          "Sievert",
          "Gray",
          "Curie"
        ],
        correctAnswer: 2
      }
    ];
    
    // Handle answer selection
    const handleAnswerSelect = (questionIndex, answerIndex) => {
      console.log("Answer selected:", questionIndex, answerIndex);
      setSelectedAnswers({
        ...selectedAnswers,
        [questionIndex]: answerIndex
      });
    };
    
    // Move to next question
    const handleNextQuestion = () => {
      console.log("Next question button clicked");
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
      } else {
        setShowResults(true);
      }
    };
    
    // Move to previous question
    const handlePreviousQuestion = () => {
      console.log("Previous question button clicked");
      if (currentQuestion > 0) {
        setCurrentQuestion(currentQuestion - 1);
      }
    };
    
    // Calculate quiz score
    const calculateScore = () => {
      let correctCount = 0;
      
      Object.keys(selectedAnswers).forEach(questionIndex => {
        if (selectedAnswers[questionIndex] === questions[questionIndex].correctAnswer) {
          correctCount++;
        }
      });
      
      return {
        correct: correctCount,
        total: questions.length,
        percentage: Math.round((correctCount / questions.length) * 100)
      };
    };
    
    // Display quiz results
    if (showResults) {
      const score = calculateScore();
      
      return (
        <div className="max-w-3xl mx-auto bg-white p-8 rounded-lg shadow-md">
          <h3 className="text-2xl font-bold mb-6 text-center">Quiz Results</h3>
          
          <div className="mb-8 text-center">
            <div className="inline-block w-32 h-32 rounded-full border-8 border-blue-500 flex items-center justify-center mb-4">
              <span className="text-3xl font-bold text-blue-600">{score.percentage}%</span>
            </div>
            <p className="text-xl">
              You answered <span className="font-semibold">{score.correct}</span> out of <span className="font-semibold">{score.total}</span> questions correctly.
            </p>
          </div>
          
          <div className="mb-8">
            <h4 className="text-xl font-semibold mb-4">Question Review</h4>
            {questions.map((q, index) => (
              <div key={index} className="mb-4 p-4 rounded-lg bg-gray-50">
                <p className="font-medium mb-2">{index + 1}. {q.question}</p>
                <p className={`${
                  selectedAnswers[index] === q.correctAnswer
                    ? 'text-green-600'
                    : 'text-red-600'
                }`}>
                  {selectedAnswers[index] === q.correctAnswer
                    ? 'â Correct'
                    : `â Incorrect. The correct answer is: ${q.options[q.correctAnswer]}`
                  }
                </p>
              </div>
            ))}
          </div>
          
          <div className="flex justify-center">
            <button 
              onClick={() => {
                console.log("Return to quizzes button clicked");
                onComplete();
              }}
              className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              Return to Quizzes
            </button>
          </div>
        </div>
      );
    }
    
    // Display current question
    return (
      <div className="max-w-3xl mx-auto">
        <h3 className="text-2xl font-bold mb-6">Radiological Fundamentals Quiz</h3>
        
        {/* Progress indicator */}
        <div className="mb-8">
          <div className="flex justify-between mb-2">
            <span>Question {currentQuestion + 1} of {questions.length}</span>
            <span>{Object.keys(selectedAnswers).length} answered</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-600 h-2 rounded-full"
              style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
            ></div>
          </div>
        </div>
        
        {/* Question card */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-6">
          <h4 className="text-xl font-semibold mb-4">{questions[currentQuestion].question}</h4>
          
          <div className="space-y-3">
            {questions[currentQuestion].options.map((option, index) => (
              <div key={index} className="flex items-center">
                <input
                  type="radio"
                  id={`option-${index}`}
                  name={`question-${currentQuestion}`}
                  checked={selectedAnswers[currentQuestion] === index}
                  onChange={() => handleAnswerSelect(currentQuestion, index)}
                  className="mr-3"
                />
                <label htmlFor={`option-${index}`}>{option}</label>
              </div>
            ))}
          </div>
        </div>
        
        {/* Navigation buttons */}
        <div className="flex justify-between">
          <button
            onClick={handlePreviousQuestion}
            className={`px-4 py-2 rounded ${
              currentQuestion === 0
                ? 'bg-gray-200 cursor-not-allowed'
                : 'bg-gray-600 text-white hover:bg-gray-700'
            }`}
            disabled={currentQuestion === 0}
          >
            Previous
          </button>
          <button
            onClick={handleNextQuestion}
            className={`px-4 py-2 rounded ${
              selectedAnswers[currentQuestion] === undefined
                ? 'bg-gray-200 cursor-not-allowed'
                : 'bg-blue-600 text-white hover:bg-blue-700'
            }`}
            disabled={selectedAnswers[currentQuestion] === undefined}
          >
            {currentQuestion === questions.length - 1 ? 'Submit Quiz' : 'Next'}
          </button>
        </div>
      </div>
    );
  }
  
  const quizzes = [
    {
      id: 1, 
      title: "Radiological Fundamentals",
      description: "Test your knowledge of basic radiation physics concepts.",
      questions: 10,
      timeLimit: "20 minutes"
    },
    {
      id: 2, 
      title: "Biological Effects of Radiation",
      description: "Assess your understanding of how radiation affects living tissues.",
      questions: 15,
      timeLimit: "30 minutes"
    },
    {
      id: 3, 
      title: "Radiation Limits and Controls",
      description: "Test your knowledge of regulatory limits and control measures.",
      questions: 12,
      timeLimit: "25 minutes"
    },
    {
      id: 4, 
      title: "Contamination Control",
      description: "Assess your understanding of contamination control practices.",
      questions: 10,
      timeLimit: "20 minutes"
    }
  ];
  
  // Simplified quiz renderer for this demo
  const renderQuiz = (id) => {
    if (id === 1) {
      return <RadiologicalFundamentalsQuiz onComplete={() => {
        console.log("Quiz completed, returning to quiz list");
        setActiveQuiz(null);
      }} />;
    }
    
    return (
      <div className="text-center py-12">
        <h3 className="text-xl font-semibold mb-4">Quiz Coming Soon</h3>
        <p className="text-gray-600">This quiz is currently under development.</p>
        <button 
          onClick={() => {
            console.log("Return to quiz list button clicked");
            setActiveQuiz(null);
          }}
          className="mt-6 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
        >
          Return to Quiz List
        </button>
      </div>
    );
  };
  
  // If a quiz is active, show it
  if (activeQuiz) {
    return renderQuiz(activeQuiz);
  }
  
  // Otherwise show the list of available quizzes
  return (
    <div>
      <div className="max-w-3xl mx-auto text-center mb-8">
        <h2 className="text-3xl font-bold mb-4">Knowledge Assessment</h2>
        <p className="text-gray-600">
          Test your understanding of radiation safety concepts and procedures.
          Select a quiz to begin.
        </p>
      </div>
      
      <div className="grid md:grid-cols-2 gap-6 max-w-4xl mx-auto">
        {quizzes.map(quiz => (
          <div 
            key={quiz.id}
            className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition cursor-pointer"
            onClick={() => {
              console.log("Quiz clicked:", quiz.title);
              setActiveQuiz(quiz.id);
            }}
          >
            <div className="p-6">
              <h3 className="text-xl font-semibold mb-2">{quiz.title}</h3>
              <p className="text-gray-600 mb-4">{quiz.description}</p>
              <div className="flex justify-between text-sm text-gray-500 mb-4">
                <span>{quiz.questions} questions</span>
                <span>{quiz.timeLimit}</span>
              </div>
              <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition w-full">
                Start Quiz
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Virtual Lab section component
function VirtualLabSection() {
  const [activeExercise, setActiveExercise] = useState(null);
  
  const exercises = [
    {
      id: 1, 
      title: "Laboratory Survey and Documentation",
      description: "Practice conducting a comprehensive radiation survey and properly documenting results.",
      duration: "45 minutes"
    },
    {
      id: 2, 
      title: "Radioactive Material Handling",
      description: "Practice proper techniques for handling various radioactive materials safely.",
      duration: "30 minutes"
    },
    {
      id: 3, 
      title: "Waste Segregation and Disposal",
      description: "Learn how to properly segregate and dispose of different types of radioactive waste.",
      duration: "40 minutes"
    },
    {
      id: 4, 
      title: "Emergency Response Drill",
      description: "Simulate response to various radiological emergency scenarios.",
      duration: "60 minutes"
    }
  ];
  
  // Simplified exercise renderer
  const renderExercise = (id) => {
    return (
      <div className="text-center py-12">
        <h3 className="text-xl font-semibold mb-4">Exercise Coming Soon</h3>
        <p className="text-gray-600">This laboratory exercise is currently under development.</p>
        <button 
          onClick={() => {
            console.log("Return to exercise list button clicked");
            setActiveExercise(null);
          }}
          className="mt-6 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
        >
          Return to Exercise List
        </button>
      </div>
    );
  };
  
  // If an exercise is active, show it
  if (activeExercise) {
    return renderExercise(activeExercise);
  }
  
  // Otherwise show the list of available exercises
  return (
    <div>
      <div className="max-w-3xl mx-auto text-center mb-8">
        <h2 className="text-3xl font-bold mb-4">Virtual Laboratory</h2>
        <p className="text-gray-600">
          Apply your knowledge in simulated laboratory environments.
          Complete these exercises to demonstrate practical skills.
        </p>
      </div>
      
      <div className="grid md:grid-cols-2 gap-6 max-w-4xl mx-auto">
        {exercises.map(exercise => (
          <div 
            key={exercise.id}
            className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition cursor-pointer"
            onClick={() => {
              console.log("Exercise clicked:", exercise.title);
              setActiveExercise(exercise.id);
            }}
          >
            <div className="p-6">
              <h3 className="text-xl font-semibold mb-2">{exercise.title}</h3>
              <p className="text-gray-600 mb-4">{exercise.description}</p>
              <div className="flex justify-between text-sm text-gray-500 mb-4">
                <span>Estimated time: {exercise.duration}</span>
              </div>
              <button className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition w-full">
                Start Exercise
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
      
      
